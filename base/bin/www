#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('base:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Create Socket.io server.
 */

var io = require('socket.io')(server);
var clients = [];
var disconnected_id = 0;
var chat = io
    .of('/chatroom')
    .on('connection', function(socket){
        var nickname = '';
        var nickname_id = 0;
        function update_client_list() {
            chat.emit('client list update', JSON.stringify(clients));
            console.log('Client list: ' + clients);
        }
        console.log('USER HAS CONNECTED TO CHAT');
        update_client_list();
        socket.on('disconnect', function(){
            if (nickname) {
                chat.emit('user disconnect', nickname);
                console.log('user disconnect. ID=' + nickname_id );

                clients.splice(nickname_id, 1);
                disconnected_id = nickname_id;

                update_client_list();
            }
        });
        socket.on('client id update', function(){
            if (nickname_id > disconnected_id){
                nickname_id--;
            }
        });
        socket.on('chat message', function(msg){
            chat.emit('chat message', nickname + ': ' + msg);
            console.log('message from ' + nickname);
        });
        socket.on('nickname', function(nick){

            nickname = nick;
            clients.push(nickname);
            nickname_id = clients.length - 1;

            chat.emit('user connect', nickname);
            console.log(nickname + 'connected');

            update_client_list();
        });
        socket.on('user is typing', function(){
            chat.emit('user is typing', JSON.stringify({nickname, nickname_id}));
        });
        socket.on('user is not typing', function(){
            chat.emit('user is not typing', JSON.stringify({nickname, nickname_id}));
        });
    });
var joker = io
    .of('/joker')
    .on('connection', function(socket){
        console.log('USER HAS CONNECTED TO JOKER');
    });


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
